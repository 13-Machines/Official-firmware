
//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt00.bmp'.
//

const byte batt00_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x34, 
	0x15, 0x06, 0x1f, 0x17, 0x13, 0x24, 
	0x18, 0x19, 0x10, 0x04, 0x1c, 0x1a, 0x17, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x28, 0x1c, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1d, 0x16, 0x18, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x1e, 0x15, 0x1f, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x15, 0x04, 0x1e, 0x1b, 0x11, 0x24, 
	0x18, 0x19, 0x10, 0x04, 0x1c, 0x1a, 0x17, 0x11, 0x24, 
	0x15, 0x06, 0x1f, 0x17, 0x13, 0x24, 
	0x10, 0x11, 0x02, 0x1e, 0x1a, 0x34, 
	
}; // 36x16 Bitmap (576 pixels) in 117 bytes

const uint16_t batt00_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6db, 0xad95, 0xa555, 0xc659, 0xd6fb, 0x73ce, 0x0000, 0x0861, 0x4a8a, 0x5aeb, 0xc679, 0x18c3, 0x9cf3, 0x18e3, 0x6b6d, 0xadb6, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt00_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt00_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt00_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt20.bmp'.
//

const byte batt20_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1a, 0x19, 0x00, 0x19, 0x13, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x18, 0x00, 0x1a, 0x1a, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1c, 0x13, 0x19, 0x00, 0x18, 0x1a, 0x10, 0x1b, 0x27, 0x1d, 
	0x17, 0x14, 0x10, 0x1c, 0x18, 0x19, 0x00, 0x18, 0x1a, 0x10, 0x2b, 0x15, 0x17, 
	0x1e, 0x14, 0x10, 0x1c, 0x1b, 0x2f, 0x00, 0x17, 0x1a, 0x10, 0x16, 0x1b, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1d, 0x19, 0x00, 0x17, 0x1a, 0x10, 0x2b, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1c, 0x00, 0x18, 0x1a, 0x10, 0x2b, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x11, 0x19, 0x00, 0x16, 0x1a, 0x10, 0x1b, 0x18, 0x14, 0x11, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x17, 0x1f, 0x00, 0x16, 0x1a, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1e, 0x1b, 0x1c, 0x1e, 0x19, 0x1f, 0x00, 0x15, 0x13, 0x10, 0x1b, 0x11, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x1f, 0x11, 0x02, 0x1e, 0x1a, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 175 bytes

const uint16_t batt20_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xbe38, 0x73ce, 0x0000, 0x0861, 0x4a8a, 0x632c, 0xc699, 0xb5f7, 0x18c3, 0x2985, 0x94b2, 0x4228, 0xd6db, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt20_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt20_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt20_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt40.bmp'.
//

const byte batt40_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x17, 0x20, 
	0x18, 0x19, 0x00, 0x1d, 0x17, 0x16, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x11, 0x12, 0x1a, 0x48, 0x1b, 0x10, 0x0c, 0x12, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x1e, 0x10, 0x1d, 0x45, 0x1d, 0x00, 0x13, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x1f, 0x13, 0x14, 0x55, 0x1b, 0x00, 0x12, 0x13, 0x10, 0x1d, 0x28, 0x12, 
	0x18, 0x14, 0x10, 0x1f, 0x1e, 0x17, 0x16, 0x45, 0x1f, 0x00, 0x12, 0x13, 0x10, 0x2d, 0x15, 0x18, 
	0x19, 0x14, 0x10, 0x1f, 0x1d, 0x1c, 0x18, 0x55, 0x13, 0x00, 0x11, 0x13, 0x10, 0x16, 0x1d, 0x15, 0x18, 
	0x18, 0x14, 0x10, 0x1f, 0x15, 0x1b, 0x11, 0x55, 0x19, 0x00, 0x11, 0x13, 0x10, 0x2d, 0x15, 0x18, 
	0x18, 0x14, 0x10, 0x1f, 0x15, 0x1f, 0x10, 0x1f, 0x45, 0x16, 0x1c, 0x00, 0x10, 0x13, 0x10, 0x2d, 0x15, 0x18, 
	0x18, 0x14, 0x10, 0x1f, 0x25, 0x11, 0x1b, 0x55, 0x14, 0x00, 0x10, 0x13, 0x10, 0x1d, 0x1e, 0x14, 0x11, 
	0x18, 0x14, 0x10, 0x1f, 0x25, 0x18, 0x1c, 0x1d, 0x45, 0x1d, 0x00, 0x10, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x14, 0x10, 0x1a, 0x1d, 0x1f, 0x1a, 0x1c, 0x1b, 0x5a, 0x11, 0xf0, 0x13, 0x10, 0x1d, 0x11, 0x20, 
	0x18, 0x19, 0x00, 0x1d, 0x17, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x17, 0x20, 
	0x1c, 0x11, 0x02, 0x1e, 0x17, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 204 bytes

const uint16_t batt40_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xbe18, 0x73ce, 0x0000, 0x0841, 0xc679, 0x4a8a, 0x52cb, 0x4228, 0x8cb2, 0xceba, 0x18c3, 0x636d, 0x2986, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt40_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt40_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt40_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt60.bmp'.
//

const byte batt60_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x13, 0x16, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x19, 0x12, 0x1a, 0x47, 0x1b, 0x13, 0x18, 0x47, 0x18, 0xc0, 0x13, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1d, 0x1e, 0x1c, 0x45, 0x1c, 0x1e, 0x17, 0x55, 0x1b, 0xb0, 0x19, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1f, 0x13, 0x14, 0x55, 0x1b, 0x12, 0x55, 0x1f, 0xb0, 0x19, 0x10, 0x1c, 0x18, 0x17, 0x12, 
	0x17, 0x14, 0x10, 0x1f, 0x1d, 0x13, 0x16, 0x45, 0x1f, 0x10, 0x1f, 0x55, 0x19, 0xa0, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x18, 0x14, 0x10, 0x1f, 0x1c, 0x1e, 0x17, 0x55, 0x19, 0x1b, 0x55, 0x18, 0xa0, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1f, 0x15, 0x1b, 0x11, 0x55, 0x18, 0x1e, 0x16, 0x45, 0x16, 0x1e, 0x90, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1f, 0x15, 0x1f, 0x10, 0x1f, 0x45, 0x16, 0x13, 0x1d, 0x55, 0x14, 0x90, 0x19, 0x10, 0x2c, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1f, 0x25, 0x11, 0x1b, 0x55, 0x14, 0x19, 0x55, 0x1c, 0x90, 0x19, 0x10, 0x1c, 0x1d, 0x14, 0x19, 
	0x17, 0x14, 0x10, 0x1f, 0x25, 0x17, 0x1e, 0x1c, 0x45, 0x1c, 0x10, 0x1a, 0x55, 0x12, 0x80, 0x19, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1a, 0x2f, 0x1a, 0x13, 0x1b, 0x5a, 0x21, 0x5a, 0x1d, 0x80, 0x19, 0x10, 0x1c, 0x11, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x13, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x1e, 0x11, 0x02, 0x1e, 0x19, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 228 bytes

const uint16_t batt60_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xc659, 0x73cf, 0x0000, 0x0841, 0x4a8a, 0x52ca, 0xb5d7, 0x4228, 0x8cb2, 0x18c3, 0x634d, 0xd6db, 0x2985, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt60_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt60_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt60_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt80.bmp'.
//

const byte batt80_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x20, 0x13, 0x20, 
	0x16, 0x17, 0x00, 0x1d, 0x18, 0x19, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x23, 0x14, 0x47, 0x1b, 0x18, 0x67, 0x10, 0x11, 0x57, 0x1c, 0x40, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x1d, 0x10, 0x16, 0x45, 0x16, 0x10, 0x14, 0x55, 0x11, 0x13, 0x55, 0x17, 0x40, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x1e, 0x1c, 0x1a, 0x55, 0x1b, 0x13, 0x55, 0x1f, 0x10, 0x1e, 0x45, 0x19, 0x18, 0x30, 0x18, 0x10, 0x36, 0x1a, 
	0x16, 0x1a, 0x10, 0x1e, 0x1d, 0x1c, 0x19, 0x45, 0x1f, 0x10, 0x1e, 0x55, 0x13, 0x11, 0x55, 0x12, 0x30, 0x18, 0x10, 0x16, 0x25, 0x16, 
	0x1e, 0x1a, 0x10, 0x1e, 0x16, 0x18, 0x17, 0x55, 0x13, 0x11, 0x55, 0x17, 0x18, 0x16, 0x45, 0x16, 0x30, 0x18, 0x10, 0x1e, 0x25, 0x16, 
	0x16, 0x1a, 0x10, 0x1e, 0x15, 0x11, 0x13, 0x55, 0x17, 0x18, 0x19, 0x45, 0x19, 0x1c, 0x1d, 0x55, 0x1b, 0x20, 0x18, 0x10, 0x16, 0x25, 0x16, 
	0x16, 0x1a, 0x10, 0x1e, 0x15, 0x1e, 0x10, 0x1e, 0x45, 0x19, 0x18, 0x1d, 0x55, 0x1a, 0x1c, 0x55, 0x14, 0x20, 0x18, 0x10, 0x16, 0x25, 0x16, 
	0x16, 0x1a, 0x10, 0x1e, 0x25, 0x13, 0x11, 0x55, 0x12, 0x1c, 0x55, 0x16, 0x10, 0x14, 0x55, 0x1c, 0x10, 0x18, 0x10, 0x16, 0x1f, 0x14, 0x1b, 
	0x16, 0x1a, 0x10, 0x1e, 0x25, 0x17, 0x18, 0x16, 0x45, 0x16, 0x10, 0x14, 0x55, 0x2b, 0x55, 0x1d, 0x10, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x1a, 0x10, 0x14, 0x1e, 0x1f, 0x14, 0x18, 0x11, 0x54, 0x23, 0x54, 0x1d, 0x10, 0x17, 0x44, 0x1f, 0x10, 0x18, 0x10, 0x16, 0x11, 0x20, 
	0x16, 0x17, 0x00, 0x1d, 0x18, 0x19, 0x11, 0x20, 
	0x14, 0x05, 0x20, 0x13, 0x20, 
	0x18, 0x11, 0x02, 0x1e, 0x1c, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 257 bytes

const uint16_t batt80_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0x8471, 0x7c10, 0xad96, 0x4228, 0x0000, 0x18e3, 0x52aa, 0xce9a, 0x0841, 0x73ce, 0x94d3, 0xc659, 0x634d, 0x2965, 0x31c7, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt80_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt80_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt80_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'batt100.bmp'.
//

const byte batt100_RLEBM_data[] PROGMEM_LATE = 
{
	0x10, 0x11, 0x02, 0x1e, 0x13, 0x30, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x22, 0x1a, 0x47, 0x1b, 0x13, 0x57, 0x18, 0x19, 0x14, 0x57, 0x11, 0x12, 0x17, 0x1a, 0x1c, 0x1b, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1e, 0x10, 0x1d, 0x45, 0x1d, 0x10, 0x17, 0x55, 0x1b, 0x11, 0x55, 0x18, 0x19, 0x16, 0x25, 0x14, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1f, 0x13, 0x14, 0x55, 0x1b, 0x12, 0x55, 0x1f, 0x10, 0x1c, 0x45, 0x16, 0x19, 0x1e, 0x25, 0x14, 0x10, 0x1d, 0x27, 0x12, 
	0x17, 0x14, 0x10, 0x1c, 0x1e, 0x19, 0x16, 0x45, 0x1f, 0x10, 0x1c, 0x55, 0x11, 0x1b, 0x55, 0x14, 0x13, 0x25, 0x14, 0x10, 0x2d, 0x15, 0x17, 
	0x18, 0x14, 0x10, 0x1c, 0x1d, 0x10, 0x17, 0x55, 0x11, 0x1b, 0x55, 0x18, 0x19, 0x1d, 0x45, 0x1c, 0x10, 0x1a, 0x15, 0x14, 0x10, 0x16, 0x1d, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1b, 0x11, 0x55, 0x18, 0x19, 0x16, 0x45, 0x16, 0x19, 0x1e, 0x55, 0x22, 0x15, 0x14, 0x10, 0x2d, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x15, 0x1f, 0x10, 0x1c, 0x45, 0x16, 0x19, 0x1e, 0x55, 0x14, 0x13, 0x55, 0x1a, 0x10, 0x1d, 0x14, 0x10, 0x2d, 0x15, 0x17, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x11, 0x1b, 0x55, 0x14, 0x13, 0x55, 0x1d, 0x10, 0x1a, 0x55, 0x13, 0x24, 0x10, 0x1d, 0x1e, 0x14, 0x11, 
	0x17, 0x14, 0x10, 0x1c, 0x25, 0x17, 0x10, 0x1d, 0x45, 0x1d, 0x10, 0x1a, 0x55, 0x1b, 0x12, 0x55, 0x1e, 0x19, 0x14, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x14, 0x10, 0x1a, 0x1c, 0x1f, 0x1a, 0x19, 0x1b, 0x5a, 0x21, 0x5a, 0x1e, 0x10, 0x18, 0x5a, 0x19, 0x12, 0x10, 0x1d, 0x11, 0x20, 
	0x17, 0x18, 0x00, 0x1d, 0x19, 0x16, 0x11, 0x20, 
	0x14, 0x05, 0x1f, 0x16, 0x13, 0x20, 
	0x19, 0x11, 0x02, 0x1e, 0x19, 0x30, 
	
}; // 36x16 Bitmap (576 pixels) in 271 bytes

const uint16_t batt100_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xad96, 0xa555, 0xbe38, 0x73cf, 0x0000, 0x0841, 0x4a8a, 0x52cb, 0xce9a, 0x4228, 0x8c92, 0x2945, 0x18c3, 0x634d, 0x31a6, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_batt100_RLEBM(RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(batt100_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(batt100_RLEBM_palette);
	bmInfo.width = 36;
	bmInfo.height = 16;
	bmInfo.flags = 0x01;
}

