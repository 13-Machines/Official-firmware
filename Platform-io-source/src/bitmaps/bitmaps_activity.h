
//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'walking.bmp'.
//

const byte walking_RLEBM_data[] PROGMEM_LATE = 
{
	0xb0, 0x11, 0x12, 0x13, 0x60, 
	0xa0, 0x14, 0x25, 0x16, 0x17, 0x50, 
	0x90, 0x18, 0x45, 0x16, 0x19, 0x40, 
	0x90, 0x1a, 0x55, 0x13, 0x40, 
	0x90, 0x18, 0x1b, 0x35, 0x1c, 0x50, 
	0xa0, 0x1a, 0x1d, 0x15, 0x1d, 0x11, 0x50, 
	0x70, 0x19, 0x1a, 0x1e, 0x1d, 0x1f, 0x17, 0x19, 0x60, 
	0x50, 0x1a, 0x1e, 0x1b, 0x55, 0x14, 0x60, 
	0x30, 0x14, 0x1b, 0x85, 0x1e, 0x60, 
	0x20, 0x12, 0x25, 0x16, 0x1f, 0x12, 0x1e, 0x45, 0x17, 0x18, 0x50, 
	0x20, 0x1d, 0x15, 0x1f, 0x18, 0x20, 0x1d, 0x45, 0x17, 0x14, 0x50, 
	0x10, 0x12, 0x15, 0x16, 0x13, 0x20, 0x18, 0x45, 0x1b, 0x14, 0x16, 0x18, 0x40, 
	0x10, 0x1d, 0x15, 0x1e, 0x30, 0x12, 0x45, 0x1e, 0x1f, 0x15, 0x1d, 0x13, 0x30, 
	0x17, 0x15, 0x16, 0x13, 0x30, 0x1e, 0x45, 0x17, 0x1a, 0x16, 0x15, 0x1c, 0x1a, 0x20, 
	0x1d, 0x15, 0x1e, 0x40, 0x1c, 0x45, 0x11, 0x10, 0x11, 0x1c, 0x15, 0x16, 0x12, 0x10, 
	0x1d, 0x16, 0x13, 0x30, 0x18, 0x45, 0x1b, 0x30, 0x18, 0x1d, 0x25, 0x14, 
	0x10, 0x19, 0x40, 0x11, 0x45, 0x1e, 0x40, 0x19, 0x1e, 0x15, 0x1b, 
	0x70, 0x1f, 0x35, 0x1e, 0x60, 0x12, 0x11, 
	0x70, 0x12, 0x14, 0x35, 0x1f, 0x19, 0x60, 
	0x60, 0x19, 0x16, 0x1f, 0x17, 0x16, 0x25, 0x1d, 0x13, 0x50, 
	0x60, 0x1a, 0x25, 0x14, 0x11, 0x1b, 0x25, 0x1b, 0x1a, 0x40, 
	0x60, 0x14, 0x25, 0x12, 0x10, 0x13, 0x1d, 0x25, 0x1b, 0x40, 
	0x50, 0x18, 0x1c, 0x25, 0x18, 0x20, 0x19, 0x1f, 0x25, 0x11, 0x30, 
	0x40, 0x19, 0x1d, 0x25, 0x1f, 0x40, 0x17, 0x25, 0x12, 0x30, 
	0x30, 0x19, 0x1f, 0x25, 0x1c, 0x18, 0x40, 0x1a, 0x25, 0x14, 0x30, 
	0x30, 0x1f, 0x25, 0x1c, 0x13, 0x50, 0x13, 0x25, 0x1e, 0x30, 
	0x20, 0x1e, 0x25, 0x1b, 0x13, 0x70, 0x16, 0x15, 0x1d, 0x30, 
	0x10, 0x12, 0x25, 0x16, 0x11, 0x80, 0x1d, 0x15, 0x1b, 0x30, 
	0x10, 0x1a, 0x15, 0x16, 0x1a, 0x90, 0x17, 0x1b, 0x14, 0x30, 
	0x20, 0x21, 0x00, 0x10, 
	
}; // 20x30 Bitmap (600 pixels) in 276 bytes

const uint16_t walking_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xb5d7, 0x94f3, 0xbe38, 0x73cf, 0x2104, 0x2945, 0x8c71, 0xc679, 0xceba, 0xad75, 0x3186, 0x39e7, 0x4248, 0x634c, 0x52cb, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_walking_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(walking_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(walking_RLEBM_palette);
	bmInfo.width = 20;
	bmInfo.height = 30;
	bmInfo.flags = 0x01;
}


//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_00.bmp'.
//

const byte act_00_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x33, 0x15, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x16, 0x11, 0x17, 0x38, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x17, 0x11, 0x14, 0x48, 0x14, 0x11, 0x17, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x10, 0x14, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x48, 0x14, 0x11, 0x17, 0x38, 0x13, 0x10, 0x15, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x12, 0x11, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x13, 0x10, 0x15, 0x48, 0x22, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x13, 0x10, 0x15, 0x48, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x48, 0x15, 0x10, 0x13, 0x19, 0x10, 
	0x10, 0x1a, 0x18, 0x22, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x15, 0x10, 0x13, 0x48, 0x11, 0x12, 0x19, 0x10, 
	0x10, 0x1a, 0x18, 0x15, 0x10, 0x13, 0x48, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x48, 0x14, 0x10, 0x16, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 330 bytes

const uint16_t act_00_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 11 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xce9a, 0xc679, 0xb5d7, 0xbe58, 0xbe38, 0xa575, 0x9d34, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_00_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_00_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_00_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_01.bmp'.
//

const byte act_01_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x10, 0x11, 0x22, 0x15, 0x10, 
	0x10, 0x16, 0x11, 0x17, 0x38, 0x17, 0x15, 0x13, 0x48, 0x17, 0x10, 0x11, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x10, 0x13, 0x48, 0x17, 0x15, 0x13, 0x48, 0x17, 0x10, 0x11, 0x48, 0x13, 0x15, 0x17, 0x18, 0x19, 0x10, 
	0x10, 0x1a, 0x11, 0x14, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x48, 0x11, 0x15, 0x17, 0x38, 0x12, 0x10, 0x14, 0x18, 0x19, 0x10, 
	0x10, 0x1b, 0x16, 0x13, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x12, 0x10, 0x14, 0x48, 0x21, 0x18, 0x19, 0x10, 
	0x10, 0x2b, 0x10, 0x14, 0x48, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x48, 0x14, 0x10, 0x12, 0x19, 0x10, 
	0x10, 0x1b, 0x1c, 0x19, 0x13, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x14, 0x10, 0x12, 0x48, 0x15, 0x11, 0x19, 0x10, 
	0x10, 0x1a, 0x1c, 0x1d, 0x10, 0x12, 0x48, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x58, 0x15, 0x11, 0x48, 0x13, 0x10, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 328 bytes

const uint16_t act_01_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 14 entries
	0xd6fb, 0xceba, 0xc659, 0xce9a, 0xc679, 0xd6db, 0x7c10, 0xbe58, 0xbe38, 0xa575, 0x39e7, 0x2965, 0x0841, 0x52aa, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_01_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_01_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_01_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_02.bmp'.
//

const byte act_02_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x11, 0x14, 0x23, 0x11, 0x10, 
	0x10, 0x16, 0x14, 0x17, 0x38, 0x17, 0x13, 0x15, 0x49, 0x1a, 0x11, 0x12, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x11, 0x14, 0x49, 0x1a, 0x10, 0x14, 0x49, 0x1a, 0x11, 0x12, 0x49, 0x14, 0x11, 0x1a, 0x19, 0x1b, 0x10, 
	0x10, 0x1c, 0x14, 0x1d, 0x48, 0x16, 0x14, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x49, 0x14, 0x11, 0x1a, 0x39, 0x13, 0x10, 0x15, 0x19, 0x1b, 0x10, 
	0x10, 0x1e, 0x16, 0x1b, 0x48, 0x1e, 0x11, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x13, 0x10, 0x15, 0x49, 0x22, 0x19, 0x1b, 0x10, 
	0x10, 0x2e, 0x10, 0x1c, 0x48, 0x1f, 0x14, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x59, 0x22, 0x49, 0x15, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1e, 0x18, 0x2f, 0x48, 0x1c, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x15, 0x10, 0x13, 0x49, 0x11, 0x14, 0x1b, 0x10, 
	0x10, 0x1c, 0x17, 0x1d, 0x11, 0x1e, 0x47, 0x19, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x49, 0x15, 0x10, 0x1b, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 329 bytes

const uint16_t act_02_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xce9a, 0xc679, 0x7bef, 0x0861, 0x0000, 0xbe38, 0xbe58, 0xad96, 0x39e7, 0x52cb, 0x2945, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_02_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_02_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_02_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_03.bmp'.
//

const byte act_03_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x43, 0x14, 0x10, 0x15, 0x33, 0x15, 0x11, 0x14, 0x23, 0x11, 0x10, 
	0x10, 0x16, 0x14, 0x17, 0x38, 0x17, 0x13, 0x19, 0x48, 0x17, 0x14, 0x12, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x4a, 0x13, 0x11, 0x14, 0x5a, 0x10, 0x14, 0x5a, 0x11, 0x12, 0x4a, 0x14, 0x11, 0x2a, 0x1b, 0x10, 
	0x10, 0x1c, 0x14, 0x19, 0x48, 0x16, 0x1a, 0x58, 0x16, 0x12, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x5a, 0x14, 0x11, 0x4a, 0x13, 0x10, 0x15, 0x1a, 0x1b, 0x10, 
	0x10, 0x1d, 0x16, 0x1e, 0x48, 0x1d, 0x11, 0x1c, 0x48, 0x1d, 0x11, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x13, 0x10, 0x15, 0x4a, 0x22, 0x1a, 0x1b, 0x10, 
	0x10, 0x2d, 0x10, 0x1c, 0x48, 0x1f, 0x1b, 0x58, 0x1b, 0x12, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x5a, 0x22, 0x4a, 0x15, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1d, 0x18, 0x1b, 0x1f, 0x48, 0x1c, 0x11, 0x1d, 0x48, 0x1c, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x15, 0x10, 0x13, 0x4a, 0x11, 0x14, 0x1b, 0x10, 
	0x10, 0x1c, 0x17, 0x19, 0x11, 0x1d, 0x47, 0x1e, 0x16, 0x57, 0x13, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x5a, 0x11, 0x14, 0x4a, 0x15, 0x10, 0x1e, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 314 bytes

const uint16_t act_03_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xce9a, 0xc679, 0x7bef, 0x0882, 0x0000, 0x52cb, 0xbe38, 0xa555, 0x39e7, 0x2145, 0xb5f7, 0x8cb2, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_03_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_03_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_03_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_04.bmp'.
//

const byte act_04_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x13, 0x10, 0x14, 0x42, 0x10, 0x11, 0x22, 0x15, 0x10, 
	0x10, 0x16, 0x13, 0x17, 0x38, 0x17, 0x12, 0x19, 0x48, 0x17, 0x14, 0x1a, 0x48, 0x17, 0x24, 0x5b, 0x10, 0x13, 0x5b, 0x10, 0x13, 0x5b, 0x10, 0x13, 0x5b, 0x10, 0x13, 0x4b, 0x12, 0x10, 0x13, 0x5b, 0x15, 0x13, 0x5b, 0x10, 0x11, 0x4b, 0x13, 0x15, 0x2b, 0x1c, 0x10, 
	0x10, 0x1a, 0x11, 0x19, 0x48, 0x16, 0x1d, 0x58, 0x16, 0x1d, 0x58, 0x16, 0x13, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x5b, 0x13, 0x15, 0x4b, 0x12, 0x10, 0x14, 0x1b, 0x1c, 0x10, 
	0x10, 0x1a, 0x16, 0x1d, 0x48, 0x1e, 0x10, 0x1a, 0x48, 0x1e, 0x10, 0x1a, 0x48, 0x1e, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x12, 0x10, 0x14, 0x4b, 0x21, 0x1b, 0x1c, 0x10, 
	0x10, 0x1a, 0x1e, 0x10, 0x1a, 0x48, 0x2c, 0x58, 0x2c, 0x58, 0x1c, 0x13, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x5b, 0x21, 0x4b, 0x14, 0x10, 0x12, 0x1c, 0x10, 
	0x10, 0x1a, 0x18, 0x2c, 0x48, 0x1a, 0x10, 0x1e, 0x48, 0x1a, 0x10, 0x1e, 0x48, 0x1a, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x14, 0x10, 0x12, 0x4b, 0x15, 0x11, 0x1c, 0x10, 
	0x10, 0x1a, 0x1f, 0x19, 0x15, 0x1e, 0x4f, 0x1d, 0x16, 0x5f, 0x1d, 0x16, 0x5f, 0x1b, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x5b, 0x15, 0x11, 0x4b, 0x13, 0x10, 0x1d, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 311 bytes

const uint16_t act_04_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xceba, 0xc659, 0xce9a, 0xc679, 0xd6db, 0x7c0f, 0x0020, 0x0000, 0x52ca, 0x31c7, 0xbe38, 0x9d34, 0xb5f7, 0x2124, 0x1082, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_04_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_04_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_04_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_05.bmp'.
//

const byte act_05_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x11, 0x10, 0x13, 0x42, 0x10, 0x11, 0x22, 0x14, 0x10, 
	0x10, 0x15, 0x11, 0x16, 0x37, 0x16, 0x12, 0x15, 0x47, 0x16, 0x13, 0x18, 0x47, 0x16, 0x13, 0x15, 0x47, 0x16, 0x13, 0x69, 0x10, 0x11, 0x59, 0x10, 0x11, 0x59, 0x10, 0x11, 0x49, 0x12, 0x10, 0x11, 0x59, 0x14, 0x11, 0x59, 0x10, 0x13, 0x49, 0x11, 0x14, 0x29, 0x1a, 0x10, 
	0x10, 0x1b, 0x11, 0x1c, 0x47, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x13, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x59, 0x11, 0x14, 0x49, 0x12, 0x10, 0x13, 0x19, 0x1a, 0x10, 
	0x10, 0x1b, 0x15, 0x1d, 0x47, 0x1e, 0x10, 0x1c, 0x47, 0x1e, 0x10, 0x1c, 0x47, 0x1e, 0x10, 0x1c, 0x47, 0x1e, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x12, 0x10, 0x13, 0x49, 0x21, 0x19, 0x1a, 0x10, 
	0x10, 0x1b, 0x1e, 0x10, 0x1b, 0x47, 0x28, 0x57, 0x28, 0x57, 0x28, 0x57, 0x18, 0x12, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x59, 0x21, 0x49, 0x13, 0x10, 0x12, 0x1a, 0x10, 
	0x10, 0x1b, 0x17, 0x28, 0x47, 0x1b, 0x10, 0x1e, 0x47, 0x1b, 0x10, 0x1e, 0x47, 0x1b, 0x10, 0x1e, 0x47, 0x1b, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x13, 0x10, 0x12, 0x49, 0x14, 0x11, 0x1a, 0x10, 
	0x10, 0x1b, 0x1f, 0x1c, 0x14, 0x1e, 0x4f, 0x1d, 0x15, 0x5f, 0x1d, 0x15, 0x5f, 0x1d, 0x15, 0x5f, 0x1d, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x59, 0x14, 0x11, 0x49, 0x13, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 312 bytes

const uint16_t act_05_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xceba, 0xc659, 0xc679, 0xd6db, 0x73cf, 0x0020, 0x0000, 0x9cf3, 0xbe38, 0xad95, 0x31c7, 0x4a69, 0xbe18, 0x2104, 0x1082, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_05_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_05_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_05_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_06.bmp'.
//

const byte act_06_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x10, 0x11, 0x22, 0x13, 0x10, 
	0x10, 0x14, 0x11, 0x15, 0x36, 0x17, 0x18, 0x19, 0x46, 0x17, 0x12, 0x19, 0x46, 0x17, 0x12, 0x19, 0x46, 0x17, 0x12, 0x19, 0x46, 0x17, 0x22, 0x58, 0x10, 0x11, 0x58, 0x10, 0x11, 0x48, 0x12, 0x10, 0x11, 0x58, 0x13, 0x11, 0x58, 0x10, 0x13, 0x48, 0x11, 0x13, 0x28, 0x1a, 0x10, 
	0x10, 0x1b, 0x11, 0x19, 0x46, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x11, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x48, 0x12, 0x10, 0x12, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x14, 0x1c, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x1e, 0x46, 0x1d, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x11, 0x13, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x1d, 0x10, 0x1b, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x1f, 0x11, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x58, 0x11, 0x13, 0x48, 0x12, 0x10, 0x12, 0x1a, 0x10, 
	0x10, 0x1b, 0x16, 0x2f, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x1d, 0x46, 0x1b, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x12, 0x10, 0x12, 0x48, 0x13, 0x11, 0x1a, 0x10, 
	0x10, 0x1b, 0x15, 0x1e, 0x13, 0x1d, 0x45, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x18, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x58, 0x13, 0x11, 0x48, 0x12, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 309 bytes

const uint16_t act_06_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xceba, 0xc679, 0xd6db, 0x7c10, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x39c7, 0xbe18, 0x2104, 0x4a69, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_06_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_06_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_06_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_07.bmp'.
//

const byte act_07_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x18, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x12, 0x13, 0x58, 0x11, 0x12, 0x48, 0x13, 0x11, 0x12, 0x58, 0x10, 0x12, 0x58, 0x21, 0x48, 0x12, 0x11, 0x28, 0x1a, 0x10, 
	0x10, 0x1b, 0x12, 0x19, 0x46, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x12, 0x58, 0x12, 0x11, 0x58, 0x12, 0x11, 0x58, 0x12, 0x11, 0x58, 0x12, 0x11, 0x48, 0x13, 0x10, 0x13, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x14, 0x1c, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x22, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x1d, 0x10, 0x1b, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x1f, 0x12, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x58, 0x22, 0x48, 0x13, 0x10, 0x13, 0x1a, 0x10, 
	0x10, 0x1b, 0x16, 0x2f, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x11, 0x1d, 0x46, 0x1b, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x11, 0x12, 0x1a, 0x10, 
	0x10, 0x1b, 0x15, 0x1e, 0x11, 0x1d, 0x45, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x18, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x58, 0x11, 0x12, 0x48, 0x12, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 305 bytes

const uint16_t act_07_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x39c7, 0xbe18, 0x2104, 0x4a69, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_07_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_07_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_07_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_08.bmp'.
//

const byte act_08_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x15, 0x12, 0x16, 0x37, 0x18, 0x13, 0x19, 0x47, 0x18, 0x14, 0x15, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x22, 0x4a, 0x13, 0x11, 0x12, 0x5a, 0x10, 0x12, 0x5a, 0x21, 0x4a, 0x12, 0x11, 0x2a, 0x1b, 0x10, 
	0x10, 0x1c, 0x12, 0x19, 0x47, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x4a, 0x13, 0x10, 0x14, 0x1a, 0x1b, 0x10, 
	0x10, 0x1e, 0x15, 0x1d, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x12, 0x11, 0x1a, 0x1b, 0x10, 
	0x10, 0x2e, 0x10, 0x1c, 0x47, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x1b, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x4a, 0x14, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1e, 0x17, 0x2f, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x11, 0x12, 0x1b, 0x10, 
	0x10, 0x1c, 0x16, 0x19, 0x11, 0x1e, 0x46, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x14, 0x12, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x12, 0x4a, 0x14, 0x10, 0x1b, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 318 bytes

const uint16_t act_08_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc659, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0x632c, 0xbe38, 0xad95, 0x39e7, 0xbe18, 0x2104, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_08_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_08_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_08_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_09.bmp'.
//

const byte act_09_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x12, 0x10, 0x14, 0x43, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x15, 0x12, 0x16, 0x37, 0x18, 0x13, 0x19, 0x47, 0x18, 0x14, 0x15, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x47, 0x18, 0x14, 0x19, 0x57, 0x14, 0x13, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x14, 0x4a, 0x12, 0x11, 0x2a, 0x1b, 0x10, 
	0x10, 0x1c, 0x12, 0x19, 0x47, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x1d, 0x57, 0x15, 0x14, 0x5a, 0x12, 0x11, 0x5a, 0x12, 0x11, 0x4a, 0x13, 0x10, 0x14, 0x1a, 0x1b, 0x10, 
	0x10, 0x1e, 0x15, 0x1d, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x1c, 0x47, 0x1e, 0x11, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x13, 0x10, 0x14, 0x4a, 0x22, 0x1a, 0x1b, 0x10, 
	0x10, 0x2e, 0x10, 0x1c, 0x47, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x2f, 0x57, 0x1f, 0x14, 0x5a, 0x22, 0x5a, 0x22, 0x4a, 0x14, 0x10, 0x13, 0x1b, 0x10, 
	0x10, 0x1e, 0x17, 0x2f, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x11, 0x1e, 0x47, 0x1c, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x14, 0x10, 0x13, 0x4a, 0x11, 0x12, 0x1b, 0x10, 
	0x10, 0x1c, 0x16, 0x19, 0x11, 0x1e, 0x46, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x15, 0x56, 0x1d, 0x12, 0x5a, 0x11, 0x12, 0x5a, 0x11, 0x12, 0x4a, 0x14, 0x10, 0x1b, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 315 bytes

const uint16_t act_09_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce9a, 0xc659, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0x632c, 0xbe38, 0xad95, 0x39e7, 0xbe18, 0x2104, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_09_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_09_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_09_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_10.bmp'.
//

const byte act_10_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x18, 0x19, 0x46, 0x17, 0x13, 0x14, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x46, 0x17, 0x13, 0x19, 0x56, 0x13, 0x19, 0x46, 0x17, 0x13, 0x12, 0x58, 0x11, 0x13, 0x48, 0x12, 0x11, 0x28, 0x1a, 0x10, 
	0x10, 0x1b, 0x12, 0x19, 0x46, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x1c, 0x56, 0x14, 0x12, 0x58, 0x12, 0x11, 0x48, 0x13, 0x10, 0x13, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x14, 0x1c, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x22, 0x18, 0x1a, 0x10, 
	0x10, 0x1b, 0x1d, 0x10, 0x1b, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x1f, 0x12, 0x58, 0x22, 0x48, 0x13, 0x10, 0x13, 0x1a, 0x10, 
	0x10, 0x1b, 0x16, 0x2f, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x10, 0x13, 0x48, 0x13, 0x10, 0x13, 0x48, 0x11, 0x12, 0x1a, 0x10, 
	0x10, 0x1e, 0x15, 0x19, 0x11, 0x1d, 0x45, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x1c, 0x14, 0x55, 0x18, 0x12, 0x58, 0x11, 0x12, 0x48, 0x12, 0x10, 0x1a, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 307 bytes

const uint16_t act_10_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce9a, 0xc679, 0x7c10, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x31a6, 0xbe18, 0x2104, 0x4208, 0x9d13, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_10_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_10_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_10_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_11.bmp'.
//

const byte act_11_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x20, 0x11, 0x42, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x11, 0x10, 0x52, 0x10, 0x11, 0x22, 0x20, 
	0x10, 0x13, 0x11, 0x14, 0x35, 0x16, 0x17, 0x18, 0x45, 0x16, 0x12, 0x13, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x45, 0x16, 0x12, 0x18, 0x55, 0x12, 0x18, 0x45, 0x16, 0x17, 0x18, 0x45, 0x16, 0x12, 0x57, 0x11, 0x10, 0x27, 0x19, 0x10, 
	0x10, 0x1a, 0x11, 0x18, 0x45, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x1b, 0x55, 0x13, 0x12, 0x47, 0x12, 0x10, 0x12, 0x17, 0x19, 0x10, 
	0x10, 0x1a, 0x1c, 0x1b, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x1e, 0x45, 0x1d, 0x10, 0x12, 0x47, 0x21, 0x17, 0x19, 0x10, 
	0x10, 0x1a, 0x1d, 0x10, 0x1a, 0x45, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x2f, 0x55, 0x1f, 0x12, 0x47, 0x12, 0x10, 0x12, 0x19, 0x10, 
	0x10, 0x1a, 0x15, 0x2f, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x1d, 0x45, 0x1e, 0x10, 0x12, 0x47, 0x10, 0x11, 0x19, 0x10, 
	0x10, 0x1e, 0x14, 0x18, 0x10, 0x1d, 0x44, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x1c, 0x54, 0x1b, 0x11, 0x47, 0x11, 0x10, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 305 bytes

const uint16_t act_11_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xce9a, 0xc679, 0x73cf, 0x1082, 0x0000, 0x0020, 0xbe38, 0x632c, 0xad95, 0x31a6, 0xbe18, 0x8450, 0x2104, 0x4208, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_11_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_11_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_11_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_12.bmp'.
//

const byte act_12_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x12, 0x18, 0x46, 0x17, 0x13, 0x14, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x13, 0x18, 0x56, 0x13, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x13, 0x14, 0x46, 0x14, 0x33, 0x19, 0x10, 
	0x10, 0x1a, 0x12, 0x18, 0x46, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x46, 0x15, 0x11, 0x2b, 0x19, 0x10, 
	0x10, 0x1a, 0x1c, 0x1b, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1d, 0x11, 0x1e, 0x46, 0x1f, 0x2b, 0x19, 0x10, 
	0x10, 0x1a, 0x1d, 0x10, 0x1a, 0x46, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x56, 0x2f, 0x46, 0x1a, 0x10, 0x13, 0x19, 0x10, 
	0x10, 0x1a, 0x16, 0x2f, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x1e, 0x11, 0x1d, 0x46, 0x19, 0x1b, 0x19, 0x10, 
	0x10, 0x1e, 0x15, 0x18, 0x11, 0x1d, 0x45, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x55, 0x1b, 0x1c, 0x45, 0x18, 0x12, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 305 bytes

const uint16_t act_12_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce9a, 0xc679, 0x73cf, 0x1082, 0x0000, 0x0020, 0x632c, 0xad96, 0x31a6, 0xbe18, 0x8450, 0x2104, 0x4208, 0x9cf3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_12_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_12_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_12_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'act_13.bmp'.
//

const byte act_13_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x53, 
	0x10, 0x11, 0x12, 0x43, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x12, 0x10, 0x53, 0x11, 0x12, 0x23, 0x11, 0x10, 
	0x10, 0x14, 0x12, 0x15, 0x36, 0x17, 0x13, 0x18, 0x46, 0x17, 0x12, 0x14, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x46, 0x17, 0x12, 0x18, 0x56, 0x12, 0x18, 0x46, 0x17, 0x13, 0x18, 0x46, 0x17, 0x12, 0x14, 0x46, 0x14, 0x13, 0x17, 0x16, 0x19, 0x10, 
	0x10, 0x1a, 0x12, 0x18, 0x46, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x56, 0x14, 0x1b, 0x46, 0x15, 0x11, 0x1c, 0x16, 0x19, 0x10, 
	0x10, 0x1a, 0x1d, 0x1b, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1e, 0x11, 0x1c, 0x46, 0x1f, 0x19, 0x16, 0x19, 0x10, 
	0x10, 0x1a, 0x1e, 0x10, 0x1a, 0x46, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x56, 0x1f, 0x19, 0x46, 0x1a, 0x10, 0x1e, 0x19, 0x10, 
	0x10, 0x1a, 0x16, 0x19, 0x1f, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1c, 0x11, 0x1e, 0x46, 0x1b, 0x1d, 0x19, 0x10, 
	0x10, 0x1c, 0x15, 0x18, 0x11, 0x1e, 0x45, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x55, 0x1b, 0x1d, 0x45, 0x18, 0x12, 0x19, 0x10, 
	0x00, 0x53, 
	0x00, 0x53, 
	0x00, 0x53, 
	
}; // 83x11 Bitmap (913 pixels) in 320 bytes

const uint16_t act_13_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xce99, 0xc659, 0x73cf, 0x1082, 0x0000, 0x0020, 0x632c, 0x9d34, 0x31a6, 0xbe17, 0x4208, 0x8450, 0x2104, 0x94f3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_act_13_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(act_13_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(act_13_RLEBM_palette);
	bmInfo.width = 83;
	bmInfo.height = 11;
	bmInfo.flags = 0x01;
}
