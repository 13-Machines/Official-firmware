
//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi00.bmp'.
//

const byte wifi00_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x22, 0x53, 0x12, 0x11, 0x00, 0x14, 
	0xf0, 0x11, 0x12, 0x14, 0x15, 0x16, 0xa7, 0x16, 0x15, 0x18, 0x12, 0x11, 0xf0, 
	0xc0, 0x11, 0x13, 0x14, 0x07, 0x13, 0x16, 0x14, 0x13, 0x11, 0xc0, 
	0xa0, 0x11, 0x14, 0x16, 0x07, 0x18, 0x16, 0x18, 0x11, 0xa0, 
	0x80, 0x11, 0x14, 0x16, 0x07, 0x1c, 0x16, 0x13, 0x11, 0x80, 
	0x70, 0x13, 0x16, 0xb7, 0x16, 0x15, 0x24, 0x28, 0x24, 0x15, 0x16, 0xb7, 0x15, 0x13, 0x70, 
	0x50, 0x11, 0x15, 0x97, 0x15, 0x18, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x18, 0x15, 0x97, 0x15, 0x12, 0x50, 
	0x40, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x00, 0x12, 0x11, 0x18, 0x16, 0x77, 0x16, 0x13, 0x40, 
	0x30, 0x14, 0x77, 0x16, 0x13, 0x11, 0x00, 0x16, 0x11, 0x13, 0x15, 0x77, 0x14, 0x30, 
	0x10, 0x11, 0x14, 0x67, 0x16, 0x18, 0x11, 0x00, 0x1a, 0x11, 0x18, 0x77, 0x14, 0x11, 0x10, 
	0x11, 0x14, 0x67, 0x15, 0x11, 0xc0, 0x21, 0x32, 0x11, 0xc0, 0x12, 0x15, 0x67, 0x14, 0x11, 
	0x11, 0x15, 0x57, 0x18, 0x90, 0x11, 0x12, 0x14, 0x15, 0x16, 0x67, 0x16, 0x15, 0x18, 0x12, 0x11, 0x90, 0x14, 0x57, 0x15, 0x11, 
	0x10, 0x11, 0x15, 0x37, 0x13, 0x80, 0x11, 0x14, 0x16, 0xe7, 0x16, 0x14, 0x12, 0x80, 0x13, 0x16, 0x27, 0x15, 0x11, 0x10, 
	0x20, 0x11, 0x15, 0x16, 0x12, 0x70, 0x11, 0x14, 0x07, 0x14, 0x14, 0x11, 0x70, 0x12, 0x16, 0x15, 0x11, 0x20, 
	0x30, 0x11, 0x12, 0x60, 0x11, 0x14, 0x07, 0x17, 0x16, 0x13, 0x70, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x15, 0xa7, 0x16, 0x45, 0x16, 0xa7, 0x15, 0x12, 0xa0, 
	0x90, 0x12, 0x16, 0x77, 0x16, 0x14, 0x12, 0x11, 0x60, 0x11, 0x12, 0x14, 0x15, 0x77, 0x16, 0x13, 0x90, 
	0x80, 0x13, 0x77, 0x15, 0x13, 0x11, 0xd0, 0x12, 0x15, 0x77, 0x13, 0x80, 
	0x80, 0x15, 0x57, 0x16, 0x13, 0x00, 0x12, 0x13, 0x16, 0x57, 0x15, 0x80, 
	0x80, 0x11, 0x15, 0x37, 0x15, 0x11, 0x00, 0x14, 0x11, 0x15, 0x37, 0x15, 0x11, 0x80, 
	0x90, 0x11, 0x15, 0x17, 0x14, 0xb0, 0x21, 0xb0, 0x14, 0x17, 0x15, 0x11, 0x90, 
	0xa0, 0x11, 0x13, 0x80, 0x12, 0x18, 0x15, 0x16, 0x27, 0x16, 0x15, 0x18, 0x12, 0x80, 0x18, 0x11, 0xa0, 
	0x00, 0x12, 0x12, 0x15, 0xa7, 0x15, 0x12, 0x00, 0x12, 
	0x00, 0x10, 0x11, 0x14, 0xe7, 0x14, 0x11, 0x00, 0x10, 
	0xf0, 0x11, 0x14, 0x07, 0x10, 0x15, 0x11, 0xf0, 
	0xf0, 0x14, 0x87, 0x26, 0x87, 0x14, 0xf0, 
	0xf0, 0x11, 0x15, 0x47, 0x14, 0x13, 0x11, 0x20, 0x11, 0x13, 0x15, 0x47, 0x15, 0x11, 0xf0, 
	0x00, 0x10, 0x11, 0x15, 0x17, 0x16, 0x12, 0x80, 0x12, 0x15, 0x17, 0x15, 0x11, 0x00, 0x10, 
	0x00, 0x11, 0x11, 0x14, 0x11, 0xa0, 0x11, 0x14, 0x11, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x18, 0x22, 0x00, 0x18, 
	0x00, 0x16, 0x11, 0x15, 0x27, 0x15, 0x12, 0x00, 0x16, 
	0x00, 0x16, 0x14, 0x47, 0x14, 0x00, 0x16, 
	0x00, 0x16, 0x11, 0x15, 0x27, 0x15, 0x11, 0x00, 0x16, 
	0x00, 0x17, 0x11, 0x25, 0x11, 0x00, 0x17, 
	0x00, 0x18, 0x21, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 432 bytes

const uint16_t wifi00_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 9 entries
	0xd6fb, 0xd6db, 0xceba, 0xce9a, 0xc679, 0xc659, 0xbe58, 0xbe38, 0xc699, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi00_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi00_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi00_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi25.bmp'.
//

const byte wifi25_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x22, 0x53, 0x22, 0x00, 0x14, 
	0xf0, 0x11, 0x12, 0x14, 0x15, 0x16, 0xa7, 0x16, 0x15, 0x14, 0x12, 0x11, 0xf0, 
	0xc0, 0x11, 0x13, 0x15, 0x07, 0x13, 0x16, 0x15, 0x13, 0x11, 0xc0, 
	0xa0, 0x11, 0x14, 0x16, 0x07, 0x18, 0x16, 0x14, 0x11, 0xa0, 
	0x80, 0x11, 0x14, 0x16, 0x07, 0x1c, 0x16, 0x13, 0x11, 0x80, 
	0x70, 0x13, 0x16, 0xb7, 0x16, 0x15, 0x64, 0x15, 0x16, 0xb7, 0x15, 0x13, 0x70, 
	0x50, 0x11, 0x15, 0x97, 0x15, 0x14, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x14, 0x15, 0x97, 0x15, 0x12, 0x50, 
	0x40, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x00, 0x12, 0x12, 0x14, 0x16, 0x77, 0x16, 0x13, 0x40, 
	0x30, 0x14, 0x77, 0x16, 0x13, 0x11, 0x00, 0x16, 0x11, 0x13, 0x15, 0x77, 0x14, 0x30, 
	0x10, 0x11, 0x15, 0x67, 0x16, 0x14, 0x11, 0x00, 0x1a, 0x11, 0x14, 0x77, 0x15, 0x11, 0x10, 
	0x11, 0x15, 0x67, 0x15, 0x12, 0xc0, 0x11, 0x42, 0x11, 0xc0, 0x12, 0x15, 0x67, 0x15, 0x11, 
	0x11, 0x15, 0x57, 0x14, 0x90, 0x11, 0x12, 0x14, 0x15, 0x16, 0x67, 0x16, 0x15, 0x14, 0x12, 0x11, 0x90, 0x14, 0x57, 0x15, 0x11, 
	0x10, 0x11, 0x15, 0x37, 0x13, 0x80, 0x12, 0x14, 0x16, 0xe7, 0x16, 0x14, 0x12, 0x80, 0x13, 0x16, 0x27, 0x15, 0x11, 0x10, 
	0x20, 0x11, 0x15, 0x16, 0x12, 0x70, 0x12, 0x14, 0x07, 0x14, 0x15, 0x11, 0x70, 0x12, 0x16, 0x15, 0x11, 0x20, 
	0x30, 0x11, 0x12, 0x60, 0x11, 0x14, 0x07, 0x17, 0x16, 0x13, 0x70, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x15, 0xa7, 0x16, 0x45, 0x16, 0xa7, 0x15, 0x12, 0xa0, 
	0x90, 0x12, 0x16, 0x77, 0x16, 0x14, 0x12, 0x11, 0x60, 0x11, 0x12, 0x14, 0x15, 0x77, 0x16, 0x13, 0x90, 
	0x80, 0x13, 0x77, 0x15, 0x13, 0x11, 0xd0, 0x12, 0x15, 0x77, 0x13, 0x80, 
	0x80, 0x15, 0x57, 0x16, 0x13, 0x00, 0x12, 0x13, 0x16, 0x57, 0x15, 0x80, 
	0x80, 0x11, 0x15, 0x37, 0x15, 0x11, 0x00, 0x14, 0x11, 0x15, 0x37, 0x15, 0x11, 0x80, 
	0x90, 0x11, 0x15, 0x17, 0x14, 0xb0, 0x21, 0xb0, 0x14, 0x17, 0x15, 0x11, 0x90, 
	0xa0, 0x11, 0x14, 0x80, 0x12, 0x14, 0x15, 0x16, 0x27, 0x16, 0x15, 0x14, 0x12, 0x80, 0x14, 0x11, 0xa0, 
	0x00, 0x12, 0x12, 0x15, 0xa7, 0x15, 0x12, 0x00, 0x12, 
	0x00, 0x10, 0x11, 0x14, 0xe7, 0x14, 0x11, 0x00, 0x10, 
	0xf0, 0x11, 0x15, 0x07, 0x10, 0x15, 0x11, 0xf0, 
	0xf0, 0x14, 0x87, 0x26, 0x87, 0x15, 0xf0, 
	0xf0, 0x11, 0x15, 0x47, 0x15, 0x13, 0x11, 0x20, 0x11, 0x13, 0x15, 0x47, 0x15, 0x11, 0xf0, 
	0x00, 0x10, 0x11, 0x15, 0x17, 0x16, 0x12, 0x80, 0x12, 0x15, 0x17, 0x15, 0x11, 0x00, 0x10, 
	0x00, 0x11, 0x11, 0x15, 0x12, 0xa0, 0x12, 0x15, 0x11, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x12, 0x28, 0x12, 0x00, 0x17, 
	0x00, 0x16, 0x18, 0x19, 0x2a, 0x19, 0x18, 0x00, 0x16, 
	0x00, 0x16, 0x1b, 0x4a, 0x1b, 0x00, 0x16, 
	0x00, 0x16, 0x17, 0x19, 0x2a, 0x19, 0x1c, 0x00, 0x16, 
	0x00, 0x17, 0x1c, 0x29, 0x1c, 0x00, 0x17, 
	0x00, 0x18, 0x27, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 431 bytes

const uint16_t wifi25_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 13 entries
	0xd6fb, 0xd6db, 0xceba, 0xce9a, 0xc679, 0xc659, 0xbe58, 0xbe38, 0xa554, 0x18c3, 0x0000, 0x31a6, 0xbe18, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi25_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi25_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi25_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi50.bmp'.
//

const byte wifi50_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x22, 0x53, 0x22, 0x00, 0x14, 
	0xf0, 0x11, 0x13, 0x14, 0x15, 0x16, 0xa7, 0x16, 0x15, 0x14, 0x12, 0x11, 0xf0, 
	0xc0, 0x11, 0x13, 0x15, 0x07, 0x13, 0x16, 0x15, 0x13, 0x11, 0xc0, 
	0xa0, 0x11, 0x14, 0x16, 0x07, 0x18, 0x16, 0x14, 0x11, 0xa0, 
	0x80, 0x11, 0x14, 0x16, 0x07, 0x1c, 0x16, 0x13, 0x11, 0x80, 
	0x70, 0x13, 0x16, 0xb7, 0x16, 0x15, 0x64, 0x15, 0x16, 0xb7, 0x16, 0x13, 0x70, 
	0x50, 0x11, 0x15, 0x97, 0x15, 0x14, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x14, 0x15, 0x97, 0x15, 0x12, 0x50, 
	0x40, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x00, 0x12, 0x12, 0x14, 0x16, 0x77, 0x16, 0x13, 0x40, 
	0x30, 0x14, 0x77, 0x16, 0x13, 0x11, 0x00, 0x16, 0x11, 0x13, 0x16, 0x77, 0x14, 0x30, 
	0x10, 0x11, 0x15, 0x67, 0x16, 0x14, 0x11, 0x00, 0x1a, 0x11, 0x14, 0x77, 0x15, 0x11, 0x10, 
	0x11, 0x15, 0x67, 0x15, 0x12, 0xc0, 0x11, 0x42, 0x11, 0xc0, 0x12, 0x15, 0x67, 0x15, 0x11, 
	0x11, 0x15, 0x57, 0x14, 0x90, 0x11, 0x12, 0x14, 0x15, 0x16, 0x67, 0x16, 0x15, 0x14, 0x12, 0xa0, 0x14, 0x57, 0x16, 0x11, 
	0x10, 0x11, 0x15, 0x37, 0x13, 0x80, 0x12, 0x14, 0x16, 0xe7, 0x16, 0x14, 0x12, 0x80, 0x13, 0x16, 0x27, 0x15, 0x11, 0x10, 
	0x20, 0x11, 0x15, 0x16, 0x12, 0x70, 0x12, 0x14, 0x07, 0x14, 0x15, 0x11, 0x70, 0x12, 0x16, 0x15, 0x11, 0x20, 
	0x30, 0x11, 0x12, 0x60, 0x11, 0x14, 0x07, 0x17, 0x16, 0x13, 0x70, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x16, 0xa7, 0x16, 0x45, 0x16, 0xa7, 0x15, 0x12, 0xa0, 
	0x90, 0x13, 0x16, 0x77, 0x16, 0x14, 0x12, 0x11, 0x60, 0x11, 0x13, 0x14, 0x16, 0x77, 0x16, 0x13, 0x90, 
	0x80, 0x13, 0x77, 0x15, 0x13, 0x11, 0xd0, 0x13, 0x15, 0x77, 0x13, 0x80, 
	0x80, 0x15, 0x57, 0x16, 0x13, 0x00, 0x12, 0x13, 0x16, 0x57, 0x15, 0x80, 
	0x80, 0x11, 0x15, 0x37, 0x15, 0x11, 0x00, 0x14, 0x11, 0x15, 0x37, 0x16, 0x11, 0x80, 
	0x90, 0x11, 0x15, 0x17, 0x14, 0xa0, 0x11, 0x24, 0x11, 0xa0, 0x14, 0x17, 0x15, 0x11, 0x90, 
	0xa0, 0x11, 0x14, 0x70, 0x11, 0x18, 0x19, 0x1a, 0x1b, 0x2c, 0x1b, 0x1d, 0x19, 0x18, 0x11, 0x70, 0x14, 0x11, 0xa0, 
	0x00, 0x12, 0x1e, 0x1a, 0xac, 0x1a, 0x18, 0x00, 0x12, 
	0x00, 0x10, 0x13, 0x19, 0xec, 0x19, 0x14, 0x00, 0x10, 
	0xf0, 0x15, 0x1d, 0x0c, 0x10, 0x1a, 0x17, 0xf0, 
	0xf0, 0x19, 0x8c, 0x1b, 0x9c, 0x1d, 0xf0, 
	0xf0, 0x17, 0x1a, 0x4c, 0x1d, 0x1e, 0x17, 0x21, 0x17, 0x1e, 0x1d, 0x4c, 0x1a, 0x17, 0xf0, 
	0x00, 0x10, 0x17, 0x1a, 0x1c, 0x1b, 0x1e, 0x80, 0x1e, 0x1b, 0x1c, 0x1d, 0x17, 0x00, 0x10, 
	0x00, 0x11, 0x16, 0x1d, 0x18, 0xa0, 0x18, 0x1d, 0x17, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x12, 0x28, 0x12, 0x00, 0x17, 
	0x00, 0x16, 0x18, 0x1a, 0x2c, 0x1a, 0x18, 0x00, 0x16, 
	0x00, 0x16, 0x1d, 0x4c, 0x1d, 0x00, 0x16, 
	0x00, 0x16, 0x17, 0x1a, 0x2c, 0x1a, 0x17, 0x00, 0x16, 
	0x00, 0x17, 0x17, 0x2a, 0x17, 0x00, 0x17, 
	0x00, 0x18, 0x27, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 434 bytes

const uint16_t wifi50_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 15 entries
	0xd6fb, 0xd6db, 0xceba, 0xce9a, 0xc679, 0xc659, 0xbe58, 0xbe38, 0xa555, 0x4a8a, 0x18e3, 0x0020, 0x0000, 0x2965, 0x8c91, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi50_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi50_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi50_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi75.bmp'.
//

const byte wifi75_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x82, 0x11, 0x00, 0x14, 
	0xf0, 0x11, 0x12, 0x23, 0xc4, 0x23, 0x12, 0x00, 0x10, 
	0xc0, 0x11, 0x12, 0x13, 0x04, 0x14, 0x13, 0x12, 0xd0, 
	0xa0, 0x11, 0x13, 0x04, 0x1a, 0x13, 0x11, 0xa0, 
	0x80, 0x11, 0x13, 0x04, 0x1e, 0x12, 0x90, 
	0x70, 0x12, 0xd4, 0x83, 0xd4, 0x12, 0x70, 
	0x50, 0x11, 0x13, 0x94, 0x23, 0x12, 0x11, 0xa0, 0x11, 0x12, 0x23, 0x94, 0x13, 0x11, 0x50, 
	0x40, 0x12, 0x94, 0x13, 0x11, 0x00, 0x12, 0x11, 0x13, 0x94, 0x12, 0x40, 
	0x30, 0x13, 0x84, 0x12, 0x00, 0x18, 0x12, 0x84, 0x13, 0x30, 
	0x20, 0x13, 0x74, 0x13, 0x00, 0x1c, 0x13, 0x74, 0x13, 0x20, 
	0x10, 0x13, 0x64, 0x13, 0x11, 0xb0, 0x12, 0x15, 0x16, 0x27, 0x16, 0x15, 0x11, 0xb0, 0x11, 0x13, 0x64, 0x13, 0x10, 
	0x11, 0x13, 0x54, 0x13, 0x90, 0x12, 0x18, 0x19, 0x1a, 0x7b, 0x1c, 0x1a, 0x19, 0x17, 0x11, 0x90, 0x13, 0x64, 0x11, 
	0x10, 0x11, 0x13, 0x34, 0x12, 0x80, 0x16, 0x19, 0x1c, 0xeb, 0x1c, 0x19, 0x17, 0x80, 0x12, 0x34, 0x13, 0x11, 0x10, 
	0x20, 0x11, 0x13, 0x14, 0x12, 0x70, 0x16, 0x1d, 0x0b, 0x14, 0x1d, 0x16, 0x70, 0x12, 0x14, 0x13, 0x11, 0x20, 
	0x40, 0x12, 0x60, 0x13, 0x19, 0x0b, 0x17, 0x1c, 0x1e, 0x12, 0x60, 0x12, 0x11, 0x30, 
	0xa0, 0x17, 0x1f, 0xab, 0x1c, 0x1f, 0x2a, 0x1f, 0x1c, 0xab, 0x1f, 0x16, 0xa0, 
	0x90, 0x18, 0x1c, 0x7b, 0x1c, 0x19, 0x18, 0x15, 0x60, 0x15, 0x18, 0x19, 0x1c, 0x7b, 0x1c, 0x18, 0x90, 
	0x80, 0x18, 0x7b, 0x1f, 0x1e, 0x12, 0xc0, 0x12, 0x18, 0x1f, 0x7b, 0x1e, 0x80, 
	0x70, 0x12, 0x1a, 0x5b, 0x1c, 0x1e, 0x12, 0x00, 0x10, 0x11, 0x1e, 0x1c, 0x5b, 0x1f, 0x12, 0x70, 
	0x80, 0x15, 0x1a, 0x3b, 0x1a, 0x15, 0x00, 0x14, 0x16, 0x1a, 0x3b, 0x1f, 0x15, 0x80, 
	0x90, 0x14, 0x1a, 0x1b, 0x1d, 0x12, 0x90, 0x11, 0x23, 0xa0, 0x12, 0x19, 0x1b, 0x1f, 0x15, 0x90, 
	0xa0, 0x13, 0x1e, 0x11, 0x70, 0x17, 0x19, 0x1a, 0x1c, 0x2b, 0x1c, 0x1a, 0x19, 0x17, 0x70, 0x11, 0x19, 0x15, 0xa0, 
	0x00, 0x12, 0x17, 0x1a, 0xab, 0x1f, 0x17, 0x00, 0x12, 
	0x00, 0x10, 0x12, 0x19, 0xeb, 0x19, 0x13, 0x00, 0x10, 
	0xf0, 0x13, 0x1a, 0x0b, 0x10, 0x1f, 0x15, 0xf0, 
	0xf0, 0x19, 0x0b, 0x12, 0x1d, 0xf0, 
	0xf0, 0x14, 0x1f, 0x4b, 0x1a, 0x18, 0x15, 0x10, 0x11, 0x15, 0x18, 0x1a, 0x4b, 0x1f, 0x14, 0xf0, 
	0x00, 0x10, 0x14, 0x1f, 0x1b, 0x1c, 0x18, 0x80, 0x17, 0x1c, 0x1b, 0x1a, 0x15, 0x00, 0x10, 
	0x00, 0x11, 0x14, 0x1d, 0x16, 0xa0, 0x16, 0x1d, 0x14, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x12, 0x27, 0x12, 0x00, 0x17, 
	0x00, 0x16, 0x16, 0x1f, 0x2b, 0x1f, 0x17, 0x00, 0x16, 
	0x00, 0x16, 0x1d, 0x4b, 0x1d, 0x00, 0x16, 
	0x00, 0x16, 0x14, 0x1f, 0x2b, 0x1f, 0x15, 0x00, 0x16, 
	0x00, 0x17, 0x15, 0x2f, 0x15, 0x00, 0x17, 
	0x00, 0x18, 0x15, 0x14, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 412 bytes

const uint16_t wifi75_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xd6db, 0xceba, 0xc679, 0xbe38, 0xbe18, 0xad96, 0x94f3, 0x8451, 0x4a8a, 0x2145, 0x0000, 0x0841, 0x31a6, 0x73ae, 0x18e3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi75_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi75_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi75_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}

//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'wifi100.bmp'.
//

const byte wifi100_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x14, 0x11, 0x12, 0x13, 0x44, 0x23, 0x15, 0x16, 0x00, 0x13, 
	0xf0, 0x17, 0x13, 0x18, 0x19, 0x1a, 0xbb, 0x19, 0x18, 0x12, 0x16, 0xf0, 
	0xc0, 0x17, 0x14, 0x19, 0x0b, 0x13, 0x1a, 0x1c, 0x14, 0x17, 0xc0, 
	0xa0, 0x11, 0x18, 0x1a, 0x0b, 0x18, 0x1a, 0x18, 0x17, 0xa0, 
	0x80, 0x11, 0x1d, 0x0b, 0x1d, 0x1a, 0x1e, 0x17, 0x80, 
	0x60, 0x16, 0x1e, 0x1a, 0xbb, 0x1a, 0x19, 0x2d, 0x38, 0x1d, 0x19, 0x1a, 0xbb, 0x1f, 0x14, 0x16, 0x60, 
	0x50, 0x11, 0x19, 0x9b, 0x1f, 0x18, 0x13, 0x11, 0xa0, 0x11, 0x13, 0x18, 0x1f, 0x9b, 0x1f, 0x15, 0x50, 
	0x40, 0x14, 0x1a, 0x7b, 0x1a, 0x18, 0x15, 0x00, 0x12, 0x15, 0x18, 0x1a, 0x7b, 0x1a, 0x14, 0x40, 
	0x20, 0x16, 0x1d, 0x7b, 0x1a, 0x1e, 0x17, 0x00, 0x16, 0x17, 0x14, 0x1a, 0x7b, 0x1d, 0x16, 0x20, 
	0x10, 0x17, 0x1c, 0x7b, 0x18, 0x17, 0x00, 0x1a, 0x16, 0x18, 0x7b, 0x1c, 0x17, 0x10, 
	0x16, 0x1c, 0x6b, 0x19, 0x15, 0xb0, 0x16, 0x11, 0x15, 0x22, 0x15, 0x11, 0x16, 0xb0, 0x15, 0x19, 0x6b, 0x19, 0x16, 
	0x11, 0x1f, 0x5b, 0x18, 0x90, 0x17, 0x13, 0x18, 0x19, 0x1a, 0x6b, 0x1a, 0x19, 0x18, 0x13, 0x90, 0x16, 0x18, 0x5b, 0x19, 0x17, 
	0x10, 0x17, 0x1f, 0x3b, 0x14, 0x80, 0x15, 0x1d, 0x1a, 0xeb, 0x1a, 0x1d, 0x15, 0x80, 0x14, 0x3b, 0x1f, 0x11, 0x10, 
	0x20, 0x11, 0x1f, 0x1a, 0x13, 0x70, 0x15, 0x1d, 0x0b, 0x14, 0x1c, 0x15, 0x70, 0x13, 0x1a, 0x1f, 0x11, 0x20, 
	0x30, 0x17, 0x12, 0x60, 0x17, 0x18, 0x0b, 0x17, 0x1a, 0x1e, 0x16, 0x60, 0x12, 0x11, 0x30, 
	0xa0, 0x12, 0x1f, 0xab, 0x1a, 0x1f, 0x29, 0x1f, 0x1a, 0xab, 0x1f, 0x15, 0xa0, 
	0x90, 0x13, 0x1a, 0x7b, 0x1a, 0x1d, 0x13, 0x11, 0x60, 0x11, 0x13, 0x18, 0x1a, 0x7b, 0x1a, 0x13, 0x90, 
	0x80, 0x14, 0x7b, 0x1f, 0x14, 0x16, 0xc0, 0x16, 0x13, 0x19, 0x7b, 0x14, 0x80, 
	0x70, 0x16, 0x19, 0x5b, 0x1a, 0x14, 0x16, 0x00, 0x10, 0x16, 0x14, 0x1a, 0x5b, 0x1f, 0x16, 0x70, 
	0x80, 0x11, 0x19, 0x3b, 0x19, 0x11, 0x00, 0x14, 0x11, 0x19, 0x3b, 0x19, 0x11, 0x80, 
	0x90, 0x17, 0x19, 0x1b, 0x1c, 0x16, 0xa0, 0x27, 0xa0, 0x16, 0x1d, 0x1b, 0x1f, 0x11, 0x90, 
	0xa0, 0x17, 0x1e, 0x16, 0x70, 0x12, 0x18, 0x19, 0x1a, 0x2b, 0x1a, 0x19, 0x18, 0x12, 0x70, 0x16, 0x18, 0x11, 0xa0, 
	0x00, 0x12, 0x13, 0x19, 0xab, 0x1f, 0x12, 0x00, 0x12, 
	0x00, 0x10, 0x16, 0x1d, 0xeb, 0x18, 0x17, 0x00, 0x10, 
	0xf0, 0x17, 0x19, 0x0b, 0x10, 0x1f, 0x11, 0xf0, 
	0xf0, 0x1d, 0x8b, 0x1a, 0x9b, 0x1c, 0xf0, 
	0xf0, 0x11, 0x1f, 0x4b, 0x19, 0x14, 0x11, 0x20, 0x11, 0x14, 0x19, 0x4b, 0x1f, 0x11, 0xf0, 
	0x00, 0x10, 0x17, 0x1f, 0x1b, 0x1a, 0x13, 0x80, 0x13, 0x1a, 0x1b, 0x19, 0x11, 0x00, 0x10, 
	0x00, 0x11, 0x17, 0x1c, 0x15, 0xa0, 0x15, 0x1c, 0x11, 0x00, 0x11, 
	0x00, 0x32, 
	0x00, 0x17, 0x16, 0x22, 0x16, 0x00, 0x17, 
	0x00, 0x16, 0x15, 0x1f, 0x2b, 0x1f, 0x15, 0x00, 0x16, 
	0x00, 0x16, 0x1c, 0x4b, 0x1c, 0x00, 0x16, 
	0x00, 0x16, 0x11, 0x1f, 0x2b, 0x1f, 0x11, 0x00, 0x16, 
	0x00, 0x17, 0x11, 0x2f, 0x11, 0x00, 0x17, 
	0x00, 0x18, 0x21, 0x00, 0x18, 
	
}; // 50x36 Bitmap (1800 pixels) in 452 bytes

const uint16_t wifi100_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 16 entries
	0xd6fb, 0xbe18, 0x9d14, 0x8c91, 0x7bef, 0xa575, 0xceba, 0xc679, 0x52cb, 0x2145, 0x0020, 0x0000, 0x31a6, 0x4a49, 0x634d, 0x18e3, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_wifi100_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(wifi100_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(wifi100_RLEBM_palette);
	bmInfo.width = 50;
	bmInfo.height = 36;
	bmInfo.flags = 0x01;
}
